This file details all necessary classes and other data structures necessary for rendering 2D polygons

for future reference, this project will be using GL 3.1, and the method of rendering will be forward rendering

class RestepWindow
	-Singleton class (only one window should exist for GL control?)
	-Inherits from OpenTK's GameWindow, for easy GL window creation
	-Handles rendering events, passes rendering control to dedicated rendering class
	members:
		public static RestepWindow Instance
		-singleton instance of the window
		-window must be initialized by calling Initialize

	functions:
		private c-tor(int w, int h, string title, GraphicsContextFlags gcf)
		-constructs a new RestepWindow, attempting to start with GL 3.1
		-exception thrown on bad version
		-loads the base shader
		-exception thrown on shader creation failure

		public static void Initialize(int w, int h, string title, GrahpicsContextFlags gcf)
		-creates a new RestepWindow instance

class Shader
	-Manages a single shader program intended for 2-D(vertex and fragment components)
	-Allows seamless addition of uniforms
	members:
		public string Name
		-Name of the shader, to be used by meshes to tell which shader is which

		private int VSHandle
		-handle to the vertex shader

		private int FSHandle
		-handle to the fragment shader

		private int progHandle
		-handle to the shader program

		public bool Loaded
		-tells whether or not this shader is usable (a shader has been loaded successfully)

		public bool Enabled
		-tells whether or not this shader is enabled for use by the renderer

		private Dictionary<string, int> uniformLocations
		-list which maps a uniform's name to its location in shader code
	
	functions:
		public c-tor(string shaderName, string shaderPath = "")
		-sets Name to shaderName, calls LoadShaderwith shaderPath; if shaderPath is empty, it does nothing

		public void LoadShader(string path)
		-attempts to load a shader from a file on the disk
		-sets loaded to true on success
		-path variable must have no extension, as LoadShader appends them when loading the two files

		public void LoadShader(string vertexSource, string fragmentSource)
		-attempts to load a shader using the specified source code provided
		-sets loaded to true on success
		-exceptions are thrown for both in the case of GL error or shader compiler error

		public void UseShader()
		-uses the shader program

		public void AddUniform(string uniformName)
		-finds the specified uniformName in the shader program, if found it is added to the dictionary
		-if the shader has not been successfully loaded yet, an exception is thrown
		-if the uniform was not found, an exception is thrown

		public void SetUniform__(string uniform, __ val)
		-set of functions which all set uniform values to the specified value
		-some include: SetUniformInt, SetUniformMat4, SetUniformFloat

		public void Dispose()
		-cleans up the shader's resources and sets loaded to false



class Texture
	-Manages a single texture stored in GL memory
	-Texture contents are NOT saved in RAM, but the path to texture is saved
	members:
		public string TexturePath
		-path to the texture in filesystem
		public bool Loaded
		-tells whether or not the texture is usable for rendering
		private int textureHandle
		-handle to the texture in GL memory
	functions:
		public c-tor(string path = "")
		-calls LoadTexture with path; if path is empty, it does nothing

		public void LoadTexture(string path)
		-attempts to load an image file from the filesystem specified by path, and stores its contents in the GL texture
		-sets loaded to true if successful
		-throws exception if creation of texture failed
		-throws exception if path is bad

		public void BindAsPrimaryTexture()
		-binds this texture
		-only runs if loaded is true

		public void UnbindTexture()
		-unbinds the current texture

		public void Dispose()
		-destroys the texture in GL memory for cleanup




class Transform
	-manages 2-D transformations of a mesh
	-results are computed into a matrix
	members:
		public Vector2 Translation
		-defines how to translate the object
		-setting this updates the translation matrix and invalidates the transformation cache
		
		public float Rotation
		-defines how to rotate the object
		-setting this updates the rotation matrix and invalidates the transformation cache
		
		public Vector2 Scale
		-defines how to scale the object on X and Y
		-setting this updates the scale matrix and invalidates the transformation cache
		
		public Vector2 ScreenSpace
		-defines how large the viewport is in pixels
		-setting this updates the screenSpace matrix and invalidates the transformation cache
		
		public Matrix3 Transformation
		-the resultant transformation matrix to be sent to the shader
		-if the cache is out of date, the transformation cache is updated

	functions:
		public c-tor(Vector2 screenSpace)
		-initialize screenSpace matrix and default all others


class VertexData
	-Intermediate between a FlatMesh and pure vertex data


abstract class FlatMesh
	-abstract definition for any 2-D mesh
	functions:
		public void Render()
		-use base shader if it is being used by this mesh, call rendermesh_internal
		-call renderwithmeshshaders
		-for each global shader in shader order excluding the base shader:
			-if shader is not enabled, continue, else use shader
			-sets necessary uniforms
			-bind and draw vertex/index array objects
		
		protected abstract void RenderWithMeshShaders()
		-abstract function intended for rendering mesh classes with their own shaders
		
		protected virtual void RenderMesh_Internal()
		-virtual function intended for handling the rendering of the mesh itself

		public abstract void InitMeshVertices()
		-abstract function for mesh classes that have hardcoded vertex data

		public abstract void InitMeshVertices(VertexData data)
		-abstract function for mesh classes that load vertex data from another source

		public abstract void PreRender()
		-abstract function for setting up a mesh before it is rendered

		protected virtual void OnBindGlobalShader(Shader gs)
		-function for assigning uniform values to a given global shader

	members:
		public bool Loaded
		-Has the mesh loaded all resources successfully?
		public bool UsingBaseShader
		-Tells whether or not the mesh is using the base shader
		public Transform Transformation
		-The transformation data of the mesh

class TexturedQuad : FlatMesh
	-class representing a textured square
	functions:
		c-tor(string texPath = "")
		-constructs a textured quad, as well as a Texture using the given path
		-does NOT initialize vertices
		public override void InitMeshVertices()
		-sets up a quad using the TexturedQuad_Internal class
		protected override void RenderMesh_Internal()
		-binds the texture and calls base
		protected override void RenderWithMeshShaders()
		--
		public override void PreRender()
		--
		protected override void OnBindGlobalShader(Shader gs)
		--
